==== Provision SQL Database Services
We can begin the process of deploying the SQL Server Software.

IMPORTANT: Focus Server is **PDC-DB-SQL1** or **WAP-DB-SQL1**

===== Install SQL Server 2012 R2 Standalone

Navigate to the source of your installation media. For example I have hosted all my media on a file server called **LAB-FS-SMB1** with a share called **Installs**, thus I will be using a UNC path similar to the following **\\\\LAB-FS-SMB1\\\\Installer\\\\SQLServer2012.en**

Launch the SQL Installation Wizard, and select the option **New SQL Server stand-alone installation** which is located on the second tab of the Wizards, called **Installation**

.SQL Installation - Splash Wizard
image::images/PKI2012R2-0001.png[PKI Post Deployment Configuration]

After a few moments, the Setup wizard will execute a set of checks to validate that all the standard prerequisites for the installation have been correctly addressed. This should not be a problem for us if we are still deploying using our reference image; otherwise we will need to address any missing components, and reboot the node, before we can progress.

.SQL Installation - Server Checks
image::images/PKI2012R2-0003.png[PKI Post Deployment Configuration]

* On the deployment of the first instance for our environment, the following page will be skipped, as the option will default to simply Preform a new installation of SQL Server 2012, however for each following instance we will deploy, we will be asked if we are to edit an existing instance, with the list of currently deployed instances listed in the table of the dialog.

* Generally we will simply select the options to Perform a new installation of SQL Server 2012

.SQL Installation - New Installation
image::images/PKI2012R2-0005.png[PKI Post Deployment Configuration]

NOTE: In the Lab, we can run with the Standard 180 Day evaluation, or provide a product key to license up the instance. For this service I am going to deploy as a standalone server, however you may want to consider deploying as a HA Always on SQL Cluster, in which case the version of SQL you select will depend on your requirements

.SQL Installation - Product Key
image::images/PKI2012R2-0007.png[PKI Post Deployment Configuration]

* Once you have chosen your edition, it is time for the obligatory license agreement, and the decision if you will send your usage data back to Microsoft for product improvements

.SQL Installation - License
image::images/PKI2012R2-0009.png[PKI Post Deployment Configuration]

* Before the step wizard will proceed to its main task, it will check to see if there are any important updates which should be applied before progressing. This will not include things like update roll ups; those we will need to address independently. I would generally recommend that we run with the updates offered by the wizard to ensure a good experience.

NOTE: On subsequence runs of the wizard, this prompt will not be offered, as the updates will generally already be installed after the first run.

.SQL Installation - Updates
image::images/PKI2012R2-0011.png[PKI Post Deployment Configuration]

* The wizard should then proceed to download and install the updates offered, getting the wizard ready for its core work to begin. After the install of the update is completed, the wizard will reload, and present its Setup Support Roles page again, to ensure there are no incompatibility issues on the node. The firewall will be in warning, which is fine, as we will open it up once the installation is complete, as a post setup step.

.SQL Installation - Download Hotfixes
image::images/PKI2012R2-0013.png[PKI Post Deployment Configuration]

* We can now tell the wizard that we want to choose the options which will be installed on our server, by selecting the option SQL Server Feature Installation

.SQL Installation - Features
image::images/PKI2012R2-0015.png[PKI Post Deployment Configuration]

* On the first instance we deploy, we will also select to install the following features
** Management Tools – Basic
** Management Tools – Complete
* We will also choose to place the Shared Feature on the data Disk
** **Shared Feature Directory:** D:\Program Files\Microsoft SQL Server\
** **Shared Feature Directory (x86):** D:\Program Files (x86)\Microsoft SQL Server\
* Now, as this server is to play as a central SQL server for our WS/SC environment, each instance will call from some different installation features. Based on the products requirements the table extra from the start of this section will act as a reminder to which features should be deployed based on the name of the instance we are now installing

[format="csv", options="header", separator="|"]
|===
Database Function | Instance | Features
Orchestrator Database, App-Controller Database, SPF Database, SMA Database|SCDB|Database Engine
SCOM Database|SCOMDB|Database Engine, Full-Text Search
SCOM Data Warehouse|SCOMDW|Database Engine, Full-Text Search
SCVMM Database,WSUS Database|SCVMMDB|Database Engine
SCSM Database|SCSMDB|Database Engine, Full-Text Search
SCSM Data Warehouse|SCSMDW|Database Engine, Full-Text Search
SCSM Analysis|SCSMAS|Analysis Services
Sharepoint|SPOINT|Database Engine
|===

.SQL Installation - Features
image::images/SQL2012R2-0000.png[PKI Post Deployment Configuration]

* The Wizard will again run a set of checks to ensure that the host is still configured correctly to accept the Features we just chose to deploy

.SQL Installation - Server Revalidation
image::images/SQL2012R2-0002.png[PKI Post Deployment Configuration]

* On the Instance Configuration page we will define the name for our SQL Instance, for our Shared SQL Server we will require a number of instances, as defined at the beginning of this section, identifying the Instance Name, along with additional configuration details. To serve as a reference the following is an extract from that table.

[format="csv", options="header", separator="|"]
|===
Database Function | Instance
Orchestrator Database, App-Controller Database, SPF Database, SMA Database|SCDB
SCOM Database|SCOMDB
SCOM Data Warehouse|SCOMDW
SCVMM Database,WSUS Database|SCVMMDB
SCSM Database|SCSMDB
SCSM Data Warehouse|SCSMDW
SCSM Analysis|SCSMAS
SharePoint|SPOINT
|===

* The Root directory can be updated also to reflect where you wish to create the SQL Databases from the roles of this instance, I normally put these on a drive which is not the system drive, for example our Data Drive.

.SQL Installation - Server Paths
image::images/SQL2012R2-0003.png[PKI Post Deployment Configuration]

* To be completely cautious, the wizard will check the selected disks, to ensure that we have enough available storage to permit the installation once started to be completed successfully, again if there is an issue at this point, we will need to address the problem, by selecting other disks, or expanding the disks offered.

.SQL Installation - Server Storage Check
image::images/SQL2012R2-0004.png[PKI Post Deployment Configuration]

* The Server Configuration page is then presented which lists each of the services associated with the roles we have selected to deploy. We have created service accounts for these roles which are assigned as follows:

[format="csv", options="header", separator="|"]
|===
Database Function | Instance | SQL Server Agent Service | SQL Server Database Engine Service
Orchestrator Database, App-Control Database, SPF Database, SMA Database|SCDB|DigiNerve\\!svcSQLDB_SCDB|DigiNerve\\!svcSQLDB_SCDB
SCOM Database|SCOMDB|DigiNerve\\!svcSQLDB_SCOMDB|DigiNerve\\!svcSQLDB_SCOMDB
SCOM Data Warehouse|SCOMDW|DigiNerve\\!svcSQLDB_SCOMDW|DigiNerve\\!svcSQLDB_SCOMDW
SCVMM Database, WSUS Database|SCVMMDB|DigiNerve\\!svcSQLDB_SCVMMDB|DigiNerve\\!svcSQLDB_SCVMMDB
SCSM Database|SCSMDB|DigiNerve\\!svcSQLDB_SCSMDB|DigiNerve\\!svcSQLDB_SCSMDB
SCSM Data Warehouse|SCSMDW|DigiNerve\\!svcSQLDB_SCSMDW|DigiNerve\\!svcSQLDB_SCSMDW
SCSM Analysis|SCSMAS|DigiNerve\\!svcSQLDB_SCSMAS|DigiNerve\\!svcSQLDB_SCSMAS
SharePoint|SPOINT|DigiNerve\\!svcSQLDB_SPOINT|DigiNerve\\!svcSQLDB_SPOINT
|===

.SQL Installation - Server Storage Check
image::images/SQL2012R2-0005.png[PKI Post Deployment Configuration]

* Assign the correct Database Engine Sorting Collation for the instance we are deploying

[format="csv", options="header", separator="|"]
|===
Database Function | Instance | Collation
Orchestrator Database, App-Control Database, SPF Database, SMA Database|SCDB|SQL_Latin1_General_CP1_CI_AS
SCOM Database|SCOMDB|SQL_Latin1_General_CP1_CI_AS
SCOM Data Warehouse|SCOMDW|SQL_Latin1_General_CP1_CI_AS
SCVMM Database, WSUS Database|SCVMMDB|SQL_Latin1_General_CP1_CI_AS
SCSM Database|SCSMDB|SQL_Latin1_General_CP1_CI_AS
SCSM Data Warehouse|SCSMDW|SQL_Latin1_General_CP1_CI_AS
SCSM Analysis|SCSMAS|SQL_Latin1_General_CP1_CI_AS
SharePoint|SPOINT|SQL_Latin1_General_CP1_CI_AS
|===

.SQL Installation - Server Storage Check
image::images/SQL2012R2-0006.png[PKI Post Deployment Configuration]

* On the Database Engine Configuration page we will define the Authentication options for our Instance.

[format="csv", options="header", separator="|"]
|===
Database Function |Instance | Administrators
Orchestrator Database, App-Control Database, SPF Database, SMA Database|SCDB|BUILTIN\\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SCDB
SCOM Database|SCOMDB|BUILTIN\\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SCOMDB
SCOM Data Warehouse|SCOMDW|BUILTIN\\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SCOMDW,
SCVMM Database,WSUS Database|SCVMMDB|BUILTIN\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SCVMMDB
SCSM Database|SCSMDB|BUILTIN\\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SCSMDB
SCSM Data Warehouse|SCSMDW|BUILTIN\\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SCSMDW
SCSM Analysis|SCSMAS|BUILTIN\\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SCSMAS
 SharePoint|SPOINT|BUILTIN\\Administrators (Administrators), DigiNerve\\!admins SQL PDC-DB-SQL SPOINT
|===

* From the table, we will assign the security groups which will be delegated privileges to the SQL Instance

.SQL Installation - Server Storage Check
image::images/SQL2012R2-0007.png[PKI Post Deployment Configuration]

* Next, we will need to define the folders to host the working resources, including the Database, Logs, backups and Temporary Database.

.SQL Installation - Server Storage Check
image::images/SQL2012R2-0008.png[PKI Post Deployment Configuration]

* On the Error Reporting page, we will send our issues to Microsoft, to they can pro-actively address any of the issues we might encounter, simply enable the check box for this to become active.

.SQL Installation - Server Storage Check
image::images/image031.png[PKI Post Deployment Configuration]

* For a final time, the wizard will run one more configuration check, this time to make sure that we are not creating issues with the options we have chosen so far, which might prevent the installation from competing. Assuming you have no errors we can proceed

.SQL Installation - Server Storage Check
image::images/image033.png[PKI Post Deployment Configuration]

* The wizard will offer up its installation options summary, for our benefit, and the location of a .ini file which contains a copy of the decisions we have made to this point, this file can be saved and used for any other deployment of SQL which we may wish to make, that would be leveraging the same decisions; useful if deploying environments for staging, and development as an example, and speeding up the deployment process as a result.

.SQL Installation - Server Storage Check
image::images/image035.png[PKI Post Deployment Configuration]

* After Clicking on the **Install** button, the wizard gets down to work, and started implementing our new SQL services.
* This process will take some time, depending on the performance of our server and storage, so now is a good time to take a break.
* Once completed, we should see that each of the features has completed their installation without issue, and that our SQL Service is ready for us to proceed.

.SQL Installation - Server Storage Check
image::images/SQL2012R2-0009.png[PKI Post Deployment Configuration]

Done!


===== Install SQL Server 2012 R2 Service Pack 2
Launch the SQL Service Pack Installation Wizard, if this has been downloaded from the internet, then the installer will begin by unpacking its content, before presenting its wizard. This process can take a few minutes to complete, so you might need to be patient while the wizard prepares to launch.

As we experience in the setup tool, the wizard starts off with a health check to ensure we are ready to go.

.SQL Service Pack - System Check
image::images/SQL2012R2-0010.png[PKI Post Deployment Configuration]

* Back again with the obligatory license agreement, and the decision if you will send your usage data back to Microsoft for product improvements

.SQL Service Pack - License
image::images/image041.png[PKI Post Deployment Configuration]

* The wizard will list the features which have been detected on the server, and will automatically select them to be targeted for the upgrade. This is essentially what we want and expect, so we can allow the wizard to proceed

.SQL Service Pack - Features
image::images/SQL2012R2-0011.png[PKI Post Deployment Configuration]

* The Files will then be checked to make sure we do not have any locks happening, which might prevent some of the files getting updated

.SQL Service Pack - Locked File Check
image::images/image045.png[PKI Post Deployment Configuration]

* Assuming there are no locks, we will be offered up the summary of changes which we will be applied to the features detected on the server. Once you are ready, we can click on Update to begin the process

.SQL Service Pack - Update
image::images/image047.png[PKI Post Deployment Configuration]

* As with the installation, this process can take a little time to complete, as the SQL instances are serviced.

.SQL Service Pack - Update Applied
image::images/image049.png[PKI Post Deployment Configuration]


===== Install SQL Server 2012 R2 Service Pack 2 Cumulative Update 5

Launch the SQL Update Wizard, the installer will begin by unpacking its content, normally you will be requested to define the location to which you wish the content to be unpacked. Once the package is unpacked, navigate to the location you unpacked to, and launch the updater.

.SQL Service Pack - Welcome
image::images/SQL2012R2-0012.png[PKI Post Deployment Configuration]

* As with the service pack, the Updater itself is also packed, so it will also need to auto-extract, as we know this process can take a few minutes to complete, so you might need to be patient while the wizard prepares to launch.
* As we experience in the setup tool, the wizard starts off with a health check to ensure we are ready to go.
* Back again with the obligatory license agreement, and the decision if you will send your usage data back to Microsoft for product improvements

.SQL Service Pack - license
image::images/SQL2012R2-0013.png[PKI Post Deployment Configuration]

* The wizard will list the features which have been detected on the server, and will automatically select them to be targeted for the upgrade. This is essentially what we want and expect, so we can allow the wizard to proceed

.SQL Service Pack - Features
image::images/SQL2012R2-0014.png[PKI Post Deployment Configuration]

* The Files will then be checked to make sure we do not have any locks happening, which might prevent some of the files getting updated

.SQL Service Pack - Checking for File Locks
image::images/SQL2012R2-0015.png[PKI Post Deployment Configuration]

* Assuming there are no locks, we will be offered up the summary of changes which we will be applied to the features detected on the server. Once you are ready, we can click on Update to begin the process

.SQL Service Pack - Scope of Work Summary
image::images/SQL2012R2-0016.png[PKI Post Deployment Configuration]

* As with the installation, this process can take a little time to complete, as the SQL instances are serviced.


===== Applying Static SQL TCP Ports

Before we being to use the new SQL Instances we deployed, we will first configure the TCP communication for the instances to use a static port. This is a requirement from some applications to actually communicate with the SQL Server; and also assists to allow us to secure the access to the SQL Server when Firewalls (including Windows Firewall) are part of the configuration.

The following table reviews the instances on our SQL Server and includes the Static Ports which we have chosen arbitrarily to use per instance


[format="csv", options="header", separator="|"]
|===
Instance |	Features |Static TCP Port
SCDB | Database Engine | 10435
SCOMDB | Database Engine, Full-Text Search | 10433
SCOMDW | Database Engine, Full-Text Search | 10434
SCVMMDB | Database Engine | 10436
SCSMDB	| Database Engine, Full-Text Search | 10437
SCSMDW	| Database Engine, Full-Text Search | 10438
SCSMAS	| Analysis Services | 10439
SPOINT	| Database Engine | 10440
|===


====== Database Instance Assign the Static TCP Port

The following procedure will define the steps required to assign the static port setting for an instance, which you will then need to repeat per Instance.

On the SQL Server, locate and launch the *SQL Server Configuration Manager*

.SQL Configuration Manager - Main Screen
image::images/SQL2012R2-0017.png[PKI Post Deployment Configuration]

* Expand the node *SQL Server Network Configuration*
** For each Database Instance installed to the server, a node will be presented
** Select the node to be configured, for example *Protocols for SCDB*

.SQL Configuration Manager - Main Screen
image::images/SQL2012R2-0018.png[PKI Post Deployment Configuration]

*** On the main window pane, double click on the Protocol *TCP/IP* to open the **TCP/IP Properties dialog**
*** In the **TCP/IP Properties dialog**, Select the *IP Addresses* Page.
**** Scroll all the way down to the section **IPALL** to display to settings
**** *TCP Dynamic Ports* - This property is blank if dynamic ports are not enabled. By default when we have more than one Instance installed on our SQL server Dynamic Ports will be enabled, and this field will contain the port number assigned to this Instance.
**** *TCP Port* - In this property, we will define the port on which SQL Server listens. In a single Instance SQL Installation, the default port is 1433 for the Database Engine.
***** Set the Static Port for the instance
****** In each section **IP1**,**IP2**,**IP3**,**IP4**,**IP5** and **IPALL** locate the property *TCP Dynamic Ports* and *Clear* the field
****** In the **IPALL** section, Assign the designated static port value under *TCP Port*.

.SQL Configuration Manager - Main Screen
image::images/SQL2012R2-0019.png[PKI Post Deployment Configuration]

****** For example for the Instance*SCDB* I have assign the port as *10435*.

*** Click **OK** to save the changes
*** A notice will be presented to remind you that the changes will not take effect until the instance is restarted.

====== Setting Database Instance Static TCP Port with PowerShell

Alternatively, The following procedure will accomplish the same Static TCP configuration for the Instance, which we will again need to repeat per Instance we wish to configure, leveraging PowerShell instead of the graphical console.

First we will define a function

```powershell

function Set-MSSQLTCPPort {
    param (
        [string]$Server,
        [string]$Instance = "MSSQLSERVER",
        [string]$TCPPort
    )

    Begin {
        # Load SQL Management Assembly
        [system.reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo")|Out-Null
        [system.reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.SqlWmiManagement")|Out-Null

        $managedComputer = new-object Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer $Server
        $managedComputerInstance = $managedComputer.ServerInstances[$Instance]
        $managedComputerInstanceProtocol = $managedComputerInstance.ServerProtocols['Tcp']

        $managedComputerInstanceProtocolTCP = $managedComputerInstanceProtocol.IPAddresses['IPAll']
        $managedComputerInstanceProtocolTCP.IPAddressProperties['TcpDynamicPorts'].Value = ''
        $managedComputerInstanceProtocolTCPPort=$managedComputerInstanceProtocolTCP.IPAddressProperties['TcpPort']
        $managedComputerInstanceProtocolTCPPort.Value = $TCPPort

        $managedComputerInstanceProtocol.Alter()

        Write-Output "Static TCP Port Assigned, Restarting Service"
        $ServiceName = "MSSQL$" + $Instance
        restart-Service ServiceName
   }
}

```

Then we can use the function to configure the instance, for example, we set the Instance SCDB to TCP Port 10435 again.

```powershell
Set-MSSQLTCPPort -Server PDC-DB-SQL01 -Instance SCDB -TCPPort 10435
```


===== Analysis Instance Assign the Static TCP Port

The following procedure will define the steps required to assign the static port setting for an instance, which you will then need to repeat per Instance.

On the SQL Server, locate and launch the *SQL Server Management Studio*

* The Connect to Server dialog will be presented
** Select the *Server Type* to **Analysis Services**
** In the *Server Name* provide the Server Name with Instance Name, e.g. *PDC-DB-SQL01\SCOMAS*
** Click on the **Connect** button to establish the connection.

.SQL Configuration Manager - Main Screen
image::images/image067.png[PKI Post Deployment Configuration]

* Once the connection is established, in the *Object Explorer* Right Click on the *Server Instance Name*
* From the *Context Menu* select the option for **Properties** to open the *Analysis Server Properties*
** Select the *General* page
** Scroll to the bottom, and locate the setting **Port**
** By default this will be set to *0*, indicating that the port is Dynamic
** Set the **Port** to the desired static number for the instance, for example *10439*

.SQL Configuration Manager - Main Screen
image::images/image069.png[PKI Post Deployment Configuration]

** Click *OK* to save the settings.
** SQL Management Studio will present a notice that a restart of the service is required for the change to take effect.
* To restart the instance, in the *Object Explorer* Right Click on the *Server Instance Name*
* From the *Context Menu* select the option **Restart**

.SQL Configuration Manager - Main Screen
image::images/image071.png[PKI Post Deployment Configuration]

* SQL will ask if we are sure we wish to proceed with the request
* Once Confirmed, we will be presented with a progress dialog as the service is restarted


===== Windows Firewall Ports

Now with the SQL Environment Ready, we just need to ensure that we have the Firewall ports open. For this one we will leverage PowerShell as we have done for many of our other services. If you prefer you can of course use the Windows Firewall with Advanced Security Manager GUI.
In addition to the static ports for each instance, the 2382 TCP/UDP and 1434 TCP/UDP ports for the SQL Server Browser service are also required. Additionally we will need to include the Analysis Service port in the list.

```powershell
# SQL Browser Service Ports
New-NetFirewallRule -DisplayName "SQL Analysis Services Browser Service (TCP)" -Protocol TCP -LocalPort 2382 –Action Allow
New-NetFirewallRule -DisplayName "SQL Analysis Services Browser Service (UDP)" -Protocol UDP -LocalPort 2382 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services Browser Service (TCP)" -Protocol TCP -LocalPort 1433 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services Browser Service (UDP)" -Protocol UDP -LocalPort 1433 –Action Allow

#SQL Database Instance Ports
New-NetFirewallRule -DisplayName "SQL Database Services SCOMDB Instance"       -Protocol TCP -LocalPort 10433 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services SCOMDW Instance"       -Protocol TCP -LocalPort 10434 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services SCDB Instance"         -Protocol TCP -LocalPort 10435 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services SCVMMDB Instance"      -Protocol TCP -LocalPort 10436 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services SCSMDB Instance"       -Protocol TCP -LocalPort 10437 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services SCSMDW Instance"       -Protocol TCP -LocalPort 10438 –Action Allow
New-NetFirewallRule -DisplayName "SQL Analysis Services SCSMAS Instance"       -Protocol TCP -LocalPort 10439 –Action Allow
New-NetFirewallRule -DisplayName "SQL Database Services SPOINT Instance"       -Protocol TCP -LocalPort 10440 –Action Allow

```
