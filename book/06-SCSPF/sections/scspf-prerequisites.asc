==== Preparation

We will start with some basic preparation work, in this case we will need some new servers which are going to be configured with thier respective role's.

===== Prepare Servers

For the deployment of the PKI Infrastructure for our Windows Azure Pack environment we are going to implement a consolidated PKI Solution, therefore we will need to prepare a single server for the delivery of the solution.

NOTE: If you wish, you may choose to also implement the PKI Infrastructure for your Windows Azure Pack domain in a Multi-Tier configuration. In such event, follow the guidance provided in the section Production Domain, and remember to pay careful attention to substituting server, and domain names if you choose to take the alternative approach.

The server we will be configuring in this section is as follows

[format="csv", options="header", separator="|"]
|===
Server Name    |PDC-SC-SPF1
IP Address     |172.21.10.29
IP Gateway     |172.21.10.1
Domain         |DigiNerve
Name Servers   |172.21.10.21
|===

Following the steps outlined in the Preparation section for the production Active Directory domain, proceed to configure all the respective servers in the above list.

===== Service Accounts

[format="csv", options="header", separator="|"]
|===
Name                        | Description                |Instance
DigiNerve\\!svcSC_SPFService|SC SPF Service Account      |SC SPF Service
|===

The Following PowerShell command will establish the account in the Production Domain, in the Services OU for us.

```powershell
New-ADUser -DisplayName "Service, SC SPF Service"  -GivenName "Service" -Surname "SC SPF Service" -Name "Service, SC SPF Service" -SamAccountName "!svcSC_SPFService" -UserPrincipalName "!svcSC_SPFService@diginerve.net" -Description "Service Account for SC Service Provider Foundation" –Enabled $true –ChangePasswordAtLogon $false -AccountPassword (ConvertTo-SecureString "!Reset123" -AsPlainText -force) -path $AccountOU.DistinguishedName
```

===== Delegation and Security Groups

[format="csv", options="header", separator="|"]
|===
Instance           | Delegation Group                    | Scope      | Type   | Members | Notes
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF Administration Web API     |Local Group |Security|         |Administrative Access to the SPF Service
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF Provider Web API              |Local Group |Security|         |Administrative Access to the SPF Service
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF VMM Web API                   |Local Group |Security|         |Administrative Access to the SPF Service
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF Usage Web API                   |Local Group |Security|         |Administrative Access to the SPF Service
|===

```powershell
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF Administration Web API" -SamAccountName "!admins SC SPF Administration Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF Administration Web API" -Path $GroupOU.DistinguishedName
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF Provider Web API" -SamAccountName "!admins SC SPF Provider Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF Provider Web API" -Path $GroupOU.DistinguishedName
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF VMM Web API" -SamAccountName "!admins SC SPF VMM Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF VMM Web API" -Path $GroupOU.DistinguishedName
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF Usage Web API" -SamAccountName "!admins SC SPF Usage Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF Usage Web API" -Path $GroupOU.DistinguishedName

```

===== DNS Aliases
None Required

===== Public Internet and Firewalls

Access to the following services should be made available trough your firewall.

[format="csv", options="header", separator="|"]
|===
Service Alias             | Source Address | Target Address | Target Port
SQL DB [SCDB] Instance    |172.21.10.xx    | 172.21.10.29   | TCP10433
|===


===== SQL Database Instances

[format="csv", options="header", separator="|"]
|===
Server      |Instance|Database Feature                  |Port  |Collation                 |Databases
PDC-DB-SQL1 |SCDB    |Database Engine                   |10436 |Latin1_General_100_CA_AS  |SPF
|===

===== PKI Certificates
The Service Provider Foundation provides an extensible OData web service. Communications to this web service can and should be encrypted by SSL. SSL requires certificates. The Service Provider Foundation allows for self-singed certificates (for testing purposes) and certificates issued by a standalone Certificate Authority, an enterprise Certificate Authority or a public Certificate Authority. The Service Provider Foundation requires a default web server certificate.

If Windows Azure for Windows Server is located in the same domain as the Service Provider Foundation you are not required to request a public certificate. If you want to enable connectivity to the Service Provider Foundation from System Center App Controller in untrusted domains a public certificate might become a better alternative.

In the following blogs I will describe connecting Windows Azure for Windows Server to the Service Provider Foundation and connecting System Center App Controller to the Service Provider Foundation. In these blogs we will have a closer look at the possible web server certificates and the corresponding pros and cons.

For the installation in this blog we will use a self-signed certificate. In the following blogs this certificate will be replaced.

Open IIS Manager, select the server in the left console and select Server Certificates in main menu.

Create SelfSigned Cert P1

When you open the Server Certificates feature the right menu allows for certificate creation.

Create SelfSigned Cert P2

Select Create Self-Signed Certificate and specify the common name. The common name must match the URL that is used when connecting to the Service Provider Foundation.

Create SelfSigned Cert P3

Please keep in mind that the self-signed certificate will not be trusted by another operating system that initiates a request to the web service. For testing purposes you can add the self-signed certificate to the trusted root certificate certificates in the computer store of the requesting operating system.

Once the service is installed, we need to protect the site with a SSL Certificate

```powershell
# Request a Certificate from our Cloud Private PKI for protecting this site
$cert = Get-Certificate -Template webserver -DnsName "spf.diginerve.net" -SubjectName "CN=spf.diginerve.net" -CertStoreLocation cert:\LocalMachine\My
```

# Add HTTPS Bindings to the Default Web Site, which is where the Certificate Web Site gets hosted.
New-WebBinding -Name "Default Web Site" -HostHeader spf.diginerve.net -Port 443 -IPAddress "*" -Protocol HTTPS -Verbose

# Finally, lets bind the certificate we just issued, to the HTTPS Site
New-Item IIS:\SslBindings\0.0.0.0!443 -value $cert.Certificate
