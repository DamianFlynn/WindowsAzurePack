==== Preparation

We will start with some basic preparation work, in this case we will need some new servers which are going to be configured with thier respective role's.

===== Prepare Servers

For the deployment of the PKI Infrastructure for our Windows Azure Pack environment we are going to implement a consolidated PKI Solution, therefore we will need to prepare a single server for the delivery of the solution.

NOTE: If you wish, you may choose to also implement the PKI Infrastructure for your Windows Azure Pack domain in a Multi-Tier configuration. In such event, follow the guidance provided in the section Production Domain, and remember to pay careful attention to substituting server, and domain names if you choose to take the alternative approach.

The server we will be configuring in this section is as follows

[format="csv", options="header", separator="|"]
|===
Server Name    |PDC-SC-SPF1
IP Address     |172.21.10.29
IP Gateway     |172.21.10.1
Domain         |DigiNerve
Name Servers   |172.21.10.21
|===

Following the steps outlined in the Preparation section for the production Active Directory domain, proceed to configure all the respective servers in the above list.

===== Service Accounts

[format="csv", options="header", separator="|"]
|===
Name                        | Description                |Instance
DigiNerve\\!svcSC_SPFService|SC SPF Service Account      |SC SPF Service
|===

The Following PowerShell command will establish the account in the Production Domain, in the Services OU for us.

```powershell
New-ADUser -DisplayName "Service, SC SPF Service"  -GivenName "Service" -Surname "SC SPF Service" -Name "Service, SC SPF Service" -SamAccountName "!svcSC_SPFService" -UserPrincipalName "!svcSC_SPFService@diginerve.net" -Description "Service Account for SC Service Provider Foundation" –Enabled $true –ChangePasswordAtLogon $false -AccountPassword (ConvertTo-SecureString "!Reset123" -AsPlainText -force) -path $AccountOU.DistinguishedName
```

===== Delegation and Security Groups

[format="csv", options="header", separator="|"]
|===
Instance           | Delegation Group                    | Scope      | Type   | Members | Notes
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF Administration Web API     |Local Group |Security|         |Administrative Access to the SPF Service
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF Provider Web API              |Local Group |Security|         |Administrative Access to the SPF Service
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF VMM Web API                   |Local Group |Security|         |Administrative Access to the SPF Service
PDC-SC-SPF1         |DIGINERVE\!admins SC SPF Usage Web API                   |Local Group |Security|         |Administrative Access to the SPF Service
|===

```powershell
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF Administration Web API" -SamAccountName "!admins SC SPF Administration Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF Administration Web API" -Path $GroupOU.DistinguishedName
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF Provider Web API" -SamAccountName "!admins SC SPF Provider Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF Provider Web API" -Path $GroupOU.DistinguishedName
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF VMM Web API" -SamAccountName "!admins SC SPF VMM Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF VMM Web API" -Path $GroupOU.DistinguishedName
New-ADGroup -GroupScope Global -GroupCategory Security -Name "!admins SC SPF Usage Web API" -SamAccountName "!admins SC SPF Usage Web API" -Description "Delegated Group exposing Administraive Privilages to connect with the SPF Usage Web API" -Path $GroupOU.DistinguishedName

```

===== DNS Aliases
None Required

===== Public Internet and Firewalls

Access to the following services should be made available trough your firewall.

[format="csv", options="header", separator="|"]
|===
Service Alias             | Source Address | Target Address | Target Port
SQL DB [SCDB] Instance    |172.21.10.xx    | 172.21.10.29   | TCP10433
|===


===== SQL Database Instances

[format="csv", options="header", separator="|"]
|===
Server      |Instance|Database Feature                  |Port  |Collation                 |Databases
PDC-DB-SQL1 |SCDB    |Database Engine                   |10436 |Latin1_General_100_CA_AS  |SPF
|===

===== PKI Certificates
The Service Provider Foundation provides an extensible OData web service. Communications to this web service should be encrypted by SSL. The Service Provider Foundation allows for self-singed certificates however these introduce a lot of issues, and should not be used at any cost. In our environment we have established a Private Key Infrastructure and will leverage it to secure the communication requirements of this service.

If our installation of Service Provider Foundation is to be exposed publically, then we should choose to use a public certificate in favour of a certificate issued from our PKI, as the users connecting to the service will be unable to validate our Private Chain, which will cause thier connections to error and fail.

As we have a working PKI in place, the procedure for requesting a certificate based on a Web Template, which is required for securing Web Sites is quite trivial. The following powershell covers the procedure.

```powershell
# Request a Certificate from our Cloud Private PKI for protecting this site
$cert = Get-Certificate -Template webserver -DnsName "spf.diginerve.net" -SubjectName "CN=spf.diginerve.net" -CertStoreLocation cert:\LocalMachine\My
```

In the event you require to use a public certificate you will need to follow the procedures of the issuing party to request and install the certificate.
