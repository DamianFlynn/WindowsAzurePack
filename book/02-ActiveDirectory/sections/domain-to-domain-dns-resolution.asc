=== Cross Forest DNS Resolution

Now, we have both environments (Production and Windows Azure Pack) online are ready for use, we will now need to change our focus to "connect" these together, establishing a relationship to enable us to resolve resources in each respective forest.

In this section we will follow the procedure to implement and ensure that each of the forests have the ability to resolve each other's respective DNS information, this is to enable us to have the environment locate domain controllers successfully so that we can proceed to with the rest of the implementation.

==== DNS Resolution
The DNS resolution in this configuration must work in both directions, such that services hosted in Production forest can resolve resources hosted in Windows Azure Pack forest, and vice-Versa

[graphviz, dns-resolution, svg]
----
digraph g {
    A -> B
    B -> A
    A  [label="DigiNerve.net"]
    B  [label="WindowsAzurePack.local"]
}
----

To accomplish this, we will create forwarders on each forest.


==== Production Domain
Using the DNS PowerShell module, we can configure the DNS Service to enable a feature known as a Conditional Forwarder. The Conditional Forwarder is a neat feature of the DNS service which will route the requests to resolve domain names which are managed by the local DNS service, and we do not wish to be forwarded to the default upstream servers to process for us, which in most cases is going to be public Internet DNS server, which will not be aware of the internal service.

To add the Conditional Forwarder, we need to let the DNS Server know the name of the domain which we will redirect the lookup requests for; how many of our DNS Servers in the Active Directory Forest we should apply this setting to, and most importantly the IP addresses of the servers which we wish to process the request for us.

```powershell
Add-DnsServerConditionalForwarderZone -Name "WindowsAzurePack.local" -ReplicationScope "Forest" -MasterServers 172.21.80.221
```

DNS hosted on Windows 2012 R2 is one of the services which is automatically added to the Windows Firewall exception list, and allowed to pass traffic in All Profiles; this implies that all we should need to do is simply restart the DNS service, and verify that the forwarding is working as expected

```powershell
restart-service DNS
```

Now, using a simple *Ping* or *NSLookup* we should be able to validate that the configuration is active, for example here we can see that the DNS check is carried out on the local DNS service of PDC-AD-DC1, and it was able to sucessfully get the correct IP address for the requested node *pri-ad-dc1.privileged.local*

```cmd
nslookup wap-ad-dc1.windowsazurepack.local
Server:  UnKnown
Address:  ::1

Non-authoritative answer:
Name:    wap-ad-dc1.windowsazurepack.local
Address:  172.21.80.221
```

==== Windows Azure Pack Domain
The exact same process is then carried out in the Production Domain so that it can resolve services in the Windows Azure Pack Domain

```powershell
Add-DnsServerConditionalForwarderZone -Name "DigiNerve.net" -ReplicationScope "Forest" -MasterServers 172.21.10.21
Restart-Service DNS
```

Before we proceed, we will also do a quick check to ensure that this new Forwarded also works. This time we could simply use a *Ping* as follows
```cmd
ping pdc-ad-dc1.diginerve.net

Pinging pdc-ad-dc1.diginerve.net [172.21.10.21] with 32 bytes of data:
Reply from 172.21.10.21: bytes=32 time<1ms TTL=128
Reply from 172.21.10.21: bytes=32 time<1ms TTL=128
Reply from 172.21.10.21: bytes=32 time<1ms TTL=128
Reply from 172.21.10.21: bytes=32 time<1ms TTL=128

Ping statistics for 172.21.10.21:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms
```
