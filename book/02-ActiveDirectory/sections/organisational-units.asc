==== Using OU's to Organise the Privileged Objects

To keep the accounts and groups which we are going to create in the Privileged domain organised into to easy use grouping's we can leverage *Organisational Units* in our domain.

The following graphic depicts a simple organisational approach which I am going to implement for this task, and includes also some sample accounts and groups, indicating where they will exisit in the domain.

[graphviz, dot-example, svg]
----
digraph g {
    G1(cn=Prod Domain Administrators)-->GP(ou=Groups)
    G2(cn=Prod SCVMM Administrators)-->GP(ou=Groups)
    G3(cn=Prod SCOM Administrators)-->GP(ou=Groups)
    GP(ou=Groups)-->AD(ou=Administration)
    A1(cn=Damian.Flynn)-->AC(ou=Accounts)
    A2(cn=Tom.Jones)-->AC(ou=Accounts)
    AC(ou=Accounts)-->AD(ou=Administration)
    AD(ou=Administration)-->DC(dc=Privileged,dc=local)
}
----

==== Create the OU Structure
Using the template we just introduced, the following PowerShell commands will establish the relevant OUs for us, and also keep a reference to these OU's for us to leverage in a few moments when we begin to define the accounts and groups to be created in the respective OU's

```powershell
$LDAPPath = "dc=diginerve,dc=net"

$OU = New-ADOrganizationalUnit -Name "Administration" -path $LDAPPath -PassThru

$AccountOU = New-ADOrganizationalUnit -Name "Accounts" -path $OU.DistinguishedName -PassThru

$GroupOU = New-ADOrganizationalUnit -Name "Groups" -path $OU.DistinguishedName -PassThru
```
==== Privileged Accounts

In the *Accounts OU*, we should create an account for each administrator whom will be delegated privileged access. The account should be created using the normal accepted naming conventions you usally implement. For example if you use the convent for Firstname.Lastname; the user will ultimualty now have two accounts, as follows:

[format="csv", options="header", separator="|"]
|===
Normal Daily Account | Privileged Access Account
**Diginerve**\Damian.Flynn | **DigiNerve\Priv.**Damian.Flynn
|===

The Following PowerShell command will establish the account in the production domain, in the Accouts OU for us.

```powershell
New-ADUser -DisplayName "Flynn, Damian [Privilaged Account]"  -GivenName "Damian" -Surname "Flynn" -Name "Flynn, Damian" -SamAccountName "Damian.Flynn" -UserPrincipalName "priv.damian.flynn@diginerve.net" -EmailAddress "damian.flynn@diginerve.net" -Title "Cloud Architect" -Description "Systems Engineer" -Department "MIS" -City "Ballina" –Enabled $true –ChangePasswordAtLogon $true -AccountPassword (ConvertTo-SecureString "p@ssw0rd " -AsPlainText -force) -path $AccountOU.DistinguishedName
```

==== Privileged Groups
Before we actually implement any group objects, we should take a moment to reaquaint ourselves  with both the Types and Scopes of groups.

===== Types of Groups
** Security groups
*** Used to control access to resources.
*** Can also be used as email distribution lists.
** Distribution groups
*** Used **only** for email distribution lists, or simple administrative groupings.
*** Cannot be used for access control because they are not security enabled.

===== Scopes of Groups
** Universal groups
*** Provide a simple 'does everything' group suitable mainly for small networks. Typically, organizations using WANs should use Universal groups only for relatively static groups in which memberships change rarely. Changes in membership will impose global catalog replication throughout an entire enterprise.
*** Universal groups can be nested within Domain Local groups and within other Universal groups in any domain
*** Universal groups accept user/computer accounts from any domain. A Global group can also be nested within a Universal group (from any domain).
*** A Universal group can be nested within another Universal group or Domain Local group in any domain
** Global groups
*** Provide domain-centric membership, place all user accounts into Global groups. Global groups can be nested within other Global groups, this may be particularly useful when delegating OU administrative functionality.
*** Global groups can be nested within Domain Local groups, Universal groups and within other Global groups in the same domain.
*** Global groups cannot be nested across domains. You cannot take a Global group from *Privilaged.local*, and nest it within another Global group in *DigiNerve.net*
*** A user or computer account from one domain cannot be nested within a Global group in another domain
** Domain Local groups
*** Used for the direct assignment of access permissions on files, printer queues, and other such resources.
*** A Domain Local group cannot be nested within a Global or a Universal group
*** Domain Local groups can grant access to resources on the same domain. For example a Domain Local group named SysAdmins on the *Privilaged.local* domain can only grant access to resources on that domain, and not on *DigiNerve.net*
*** Domain Local groups can accept anything, except for Domain Local Groups from another domain.
*** Domain Local groups accept User Accounts from any domain.

===== Group Relationships
The following table will help us understand the different relationships of the groups

[format="csv", options="header", separator="|"]
|===
Group Scope|Location|Local Users can join?|Domain Users can join?|User accounts from another domain?|Local Computer accounts|Domain Computer accounts|Computer accounts from another domain|Machine Local groups|Domain Local groups|Global groups|Universal groups
Machine Local|Stored in local sam database|Yes|Yes|   |No| No|   |No|Yes              |Yes|Yes
Domain Local | Stored in AD               | No|Yes|Yes|No|Yes|Yes|No|Yes (same domain)|Yes|Yes
Global       | Stored in AD               | No|Yes|No |No|Yes|No |No|No               |Yes (same domain)| No
Universal    | Stored in AD               | No|Yes|Yes|No|Yes|Yes|No|No               |Yes|Yes
|===

===== Best Practices
Place users in Global groups, nest those inside Domain Local groups which in turn are used to apply permissions, as shown below. This will also maximise performance in a multi-domain forest.

===== Delegation Groups
In the *Groups OU* we will next create a Group for each delegation privilege we are going to offer; for example I am going to start with the following:

[format="csv", options="header", separator="|"]
|===
Group Name    | Description                                             | Members
Domain Admins | Access to the Domain Admin Role on the DigiNerve Domain | Diginerve\Priv.Damian.Flynn
|===

The PowerShell to establish this new Group looks similar to the following

```powershell
$delegationGroup = New-ADGroup -Name ("!prod Domain Admins") -SamAccountName ("!prod Domain Admins") -GroupCategory Security -GroupScope Universal -DisplayName ("!CORP delegation IT " + $Site + " OU Administration") -Path $DelegationGroupOUPath -Description "Delegation access for IT to Manage the $SITE site OU in AD" -Passthru
```
