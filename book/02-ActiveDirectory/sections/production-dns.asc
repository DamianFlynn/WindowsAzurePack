==== Configuring DNS Services

===== Zone Forwarders

As the root DC, we will want to use Root Hints as the main method of resolving name services. By default I will remove any forwarded which will be added to the DNS node as a result of been deployed trough the promotion of the new Domain Controller. PowerShell will help automate the process with the following command which will enumerate all the currently defined forwarders, if any, and then remove each in turn.

```powershell
Get-DnsServerForwarder | Remove-DnsServerForwarder -Force
```
===== Reverse Zone

Next, we will enable our DNS server to offer Reverse resolution for the IP range which we have added to the environment

```powershell
Add-DnsServerPrimaryZone -NetworkID "172.21.10.0/24" -ReplicationScope "Forest"
```
===== DNS Aging and Scavenging

Out of the box in DNS will not be enabled to set aging on any records added to the service. This aging is used to determine if the client which was automatically registered with DNS is still alive on the network and working well, based on the client attempting to use Dynamic DNS to update its records. The timestamps associated to these attempts are checked, and If there has been no updated completed within the time frame of the Refresh Interval, the DNS server will flag this record as stale.

Note that if a record is manually added to the DNS Zone, no timestamp will be applied, and thus it is not including in the aging process.

Once the record is determined as stale, a garbage collection process will kick off on the named server, called a Scavenge, which will move forward deleting these stale records from the environment for us.

This is pretty low risk process, as it really has its most effect on churn for desktop workstations, which of course maybe of network for longer periods than the refresh interval, however, in these cases, once the system is back on the network, if it is working correctly it will simply issue a new Dynamic DNS update, and recreate its record if necessary.

```powershell
$myDNSScavengeServer = hostname

$myDNSScavengeServerIP = [System.Net.DNS]::GetHostAddresses($myDNSScavengeServer).IPAddressToString

$NoRefresh = "7.00:00:00"

$Refresh = "7.00:00:00"

Get-DnsServerZone | ? {$_.ZoneType -like 'Primary' -and $_.ZoneName -notlike 'TrustAnchors' -and $_.IsDsIntegrated -like 'True'} | Set-DnsServerZoneAging -Aging $true -NoRefreshInterval $NoRefresh -RefreshInterval $Refresh -ScavengeServers $myDNSScavengeServerIP
```
===== Restart the DNS Service

For the changes to become active we need to restart the DNS service. Again with PowerShell this is accomplished with the command

```powershell
Restart-Service DNS
```
