==== Preparation

We will start with some basic preparation work, in this case we will need a new server which is going to take the role of our 2012 R2 Domain controller. Once the server has been deployed and patched, we can proceed to configure it with its identity and network settings, while also getting some of the basic management tools for Active Directory deployed as these will be very important to us as we proceed with the installation.

===== Prepare Domain Controller

The deployment of the WAP Domain controller follows the same steps as we have previously completed while implementing the production domain. For detailed guidance on the steps please reference back to the section as required.

The server we will be configuring in this section is as follows

[format="csv", options="header"]
|===
*Name* , WAP-AD-DC1
*IP Address* , 172.21.80.221
*IP Gateway*, 172.21.80.1
*Name Server* , Public Service e.g. 8.8.8.8
|===

As outlined in the earlier section for the production domain, proceed to configure both the server Name, and Network addresses for our system, paying close attention to the correct gateway address.

As with out production domain controller, we will again require that we have the necessary management tools available.

```powershell
Add-WindowsFeature –Name RSAT-ADDS-Tools
```
==== Deploying a new 2012 R2 Forest, Domain Controller

We take the prepared server, and simply promote it as the first domain controller for our WAP Forest. To start the process, launch a new PowerShell session with Administrative privileges.

```powershell
Add-WindowsFeature –Name AD-Domain-Services
```
Once the role has been installed, we can then proceed to promote the server to Domain Controller status. This process requires that we provide some details related to the environment configuration we are joining. For example some of the parameters we will need to provide include

[format="csv", options="header", , separator="|"]
|===
AD DNS Domain Name | AzurePack.local
AD NetBIOS Name | AzurePack
AD Restore Password | D1saster!
|===

Back at our PowerShell prompt we can issue the following commands to execute the process
```powershell
$safeModePassword = ConvertTo-SecureString "D1saster" –AsPlainText -Force

Install-ADDSForest –CreateDNSDelegation:$false -DomainMode "Win2012R2" -ForestMode "Win2012R2" -DomainName "AzurePack.local" -DomainNetbiosName "AzurePack" -InstallDNS:$true -DatabasePath "C:\Windows\NTDS" -LogPath "C:\Windows\NTDS" -SYSVOLPath "C:\Windows\SYSVOL" -SafeModeAdministratorPassword $SafeModePassword -NoRebootOnCompletion:$false -Force:$true –verbose
```
==== Configuring DNS Services

The configuration procedure we follow for the domain controller will again be quite similar to the procedure executed on the Production domain controller, however we will need to substitute some of the Network IP address spaces as appropriate.

===== Zone Forwarders

As before our preference will be to leverage the use of Root Hints as the main method of resolving name services.

```powershell
Get-DnsServerForwarder | Remove-DnsServerForwarder -Force
```
===== Reverse Zone

We will again enable the DNS server to offer Reverse resolution, this time for the networks with will be used by the Windows Azure Pack forest, namely the **Secure DMZ** and **Unsecure DMZ**

```powershell
Add-DnsServerPrimaryZone -NetworkID "172.21.80.0/24" -ReplicationScope "Forest"
Add-DnsServerPrimaryZone -NetworkID "172.21.90.0/24" -ReplicationScope "Forest"
```
===== DNS Aging and Scavenging
Keeping consistent, we will again enable the aging and Scavenging features to execute every 7 days.

```powershell
$myDNSScavengeServer = hostname
$myDNSScavengeServerIP = [System.Net.DNS]::GetHostAddresses($myDNSScavengeServer).IPAddressToString
$NoRefresh = "7.00:00:00"
$Refresh = "7.00:00:00"
Get-DnsServerZone | ? {$_.ZoneType -like 'Primary' -and $_.ZoneName -notlike 'TrustAnchors' -and $_.IsDsIntegrated -like 'True'} | Set-DnsServerZoneAging -Aging $true -NoRefreshInterval $NoRefresh -RefreshInterval $Refresh -ScavengeServers $myDNSScavengeServerIP
```
===== Restart the DNS Service

For the changes to become active we need to restart the DNS service. Again with PowerShell this is accomplished with the command

```powershell
Restart-Service DNS
```
==== Sites and Services Replication Configuration

In the scope of this book, we are not implementing a distributed installation of the Windows Azure Pack, but instead host all the components in the same datacenter. Therefore the requirement for us to configure our hosting Active Directory for replication over multiple sites is also not present.

===== Create New AD Sites

All the components for the Azure Pack will be implemented in the Primary Datacenter, therefore this is the only location which truly needs to be defined at this point. You may at any time revisit this and update the configuration based on your own requirements. We will use the following PowerShell to define the Primary Datacentre.

```powershell
New-ADReplicationSite -Name "PDC" -Description "Primary Data Center"
```
===== Define IP Scope for assigned to a Site

Next we will create the IP subnet which are associated with the location.

```powershell
New-ADReplicationSubnet -Name "172.21.80.0/24" -Description "PDC Secure DMZ Subnet 180" -Site PDC -Location "Ballina, Ireland"
New-ADReplicationSubnet -Name "172.21.90.0/24" -Description "PDC Unsecure DMZ Subnet 190" -Site PDC -Location "Ballina, Ireland"
```

===== Move Domain Controllers to their respective Sites

As part of the initial deployment, our domain controllers were added to a site in AD, which is created by default, with the name "Default-First-Site-Name". Now that I have or real sites defined, we can use the Sites and Services UI to move the Domain Controller to the correct site, or much quicker, we can use PowerShell.

```powershell
Move-ADDirectoryServer -Identity WAP-AD-DC1 -Site PDC
```
===== Clean Up the Defaults

Finally, now that we have the new sites in place, and moved the domain controllers to the correct locations, we can now go back and clean up the original sites which were created in AD Sites and Services for us during the forest creation. PowerShell to the task again:

```powershell
Remove-ADReplicationSiteLink -Identity DEFAULTIPSITELINK -Confirm:$False
Remove-ADReplicationSite -Identity "Default-First-Site-Name" -Confirm:$False
```
==== Time Synchronisation

The same rules in relation to supporting and configuring time for our Production Domain Controller, are now appropriate for our new Windows Azure Pack domain.

Following the guidance in the Production Time Synchronisation section, proceed to configure the time services on the Windows Azure Pack domain, and where possible we should be using the same time source. If this is not an option for whatever reasons, then the next best source should be our production domain controllers.

==== Enabling Optional Features

Finally, we can again follow the guidance from the Production Optional Features section, enabling the same features in this forest also.
